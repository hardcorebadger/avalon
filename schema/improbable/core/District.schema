package improbable.core;

import "improbable/core/Nothing.schema";
import "improbable/vector3.schema";

type BuildingRegistrationRequest {
    EntityId building_id = 1;
    Vector3d position = 2;
    int32 beds = 3; 
    list<int32> accepting_items = 4;
    bool construction = 5;
}

type BuildingDeregistrationRequest {
    EntityId building_id = 1;
    int32 beds = 2; 
}

type CharacterRegistrationRequest {
    list<EntityId> characters = 1;
}

type CharacterDeregistrationRequest {
    list<EntityId> characters = 1;
}

type BuildingList {
    list<EntityId> list = 1;
}

type StorageUpdateRequest {
    EntityId building = 1;
    int32 item = 2;
}

type ItemFindRequest {
    list<int32> ids = 1;
    option<EntityId> asker = 2;
}

type ItemFindResponse {
    int32 id = 1;
    option<EntityId> storage = 2;
    Vector3d position = 3;
}

type ItemStorageRequest {
    int32 id = 1;
}

type ItemStorageResponse {
    option<EntityId> storage = 2;
    Vector3d position = 3;
}

type BuildingQueryResponse {
    option<EntityId> building = 1;
}

type FindConstructionRequest {
    EntityId prev = 1;
}

component District {
    id = 1020;
    
    map<EntityId, Vector3d> position_map = 1;
    map<int32, BuildingList> storage_map = 2;
    map<int32, BuildingList> storage_availability_map = 3;
    int32 beds = 4;
    list<EntityId> character_list = 5; 
    list<EntityId> construction_list = 6; 
   
    command Nothing register_building(BuildingRegistrationRequest);
    command Nothing deregister_building(BuildingDeregistrationRequest);
    command Nothing storage_update_has(StorageUpdateRequest);
    command Nothing storage_update_out(StorageUpdateRequest);
    command Nothing storage_update_accepting(StorageUpdateRequest);
    command Nothing storage_update_not_accepting(StorageUpdateRequest);
    command ItemFindResponse find_any_item(ItemFindRequest);
    command ItemStorageResponse find_item_storage(ItemStorageRequest);
    command BuildingQueryResponse find_construction_site(FindConstructionRequest);
    command Nothing register_character(CharacterRegistrationRequest); 
    command Nothing deregister_character(CharacterDeregistrationRequest); 
    event Nothing show_cede;

}